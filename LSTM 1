import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import optuna
import matplotlib.pyplot as plt

# Load the data
df = pd.read_csv('/YOUR.CSV')

# Ensure date format and select 'Price'
df['Date'] = pd.to_datetime(df['Date'])
data = df[['Price']].values

# Normalize data
scaler = MinMaxScaler(feature_range=(0, 1))
data_scaled = scaler.fit_transform(data)

# Function to create sequences
def create_sequences(data, sequence_length, forecast_horizon=14):
    X, y = [], []
    for i in range(sequence_length, len(data) - forecast_horizon):
        X.append(data[i-sequence_length:i, 0])
        y.append(data[i:i+forecast_horizon, 0])  # Predicting the next forecast_horizon days
    return np.array(X), np.array(y)

# Optuna objective function
def objective(trial):
    sequence_length = trial.suggest_int("sequence_length", 14, 60)
    lstm_units = trial.suggest_int("lstm_units", 30, 100)
    dropout_rate = trial.suggest_float("dropout_rate", 0.1, 0.5)
    batch_size = trial.suggest_categorical("batch_size", [16, 32, 64])
    epochs = trial.suggest_int("epochs", 10, 50)

# Define sequence length (how many past days to look at)
sequence_length = 60  # Lookback window


# Create sequences based on suggested sequence length
X, y = create_sequences(data_scaled, sequence_length)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # Reshape for LSTM input
    
# Split data into train/test sets
train_size = int(0.8 * len(X))
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]
    
    # Build the model
    model = Sequential([
	LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
	LSTM(units=50),
	Dense(units=14)  # Outputting 14 future days
])

    
    model.compile(optimizer='adam', loss='mean_squared_error')
    
    # Train model
epochs = 20
batch_size = 32
model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_test, y_test))

    
# Forecast on the test set and compute RMSE
last_sequence = data_scaled[-sequence_length:]
last_sequence = np.reshape(last_sequence, (1, sequence_length, 1))
predicted_scaled = model.predict(last_sequence)
     predicted = scaler.inverse_transform(predicted_scaled).flatten()
    
actual_values = df['Price'].values[-14:]  # Actual last 14 values
rmse = np.sqrt(mean_squared_error(actual_values, predicted[:14]))
    print("RMSE:", rmse)
    
#Optuna def
import optuna

def objective(trial):
	x = trial.suggest_float("x", -1, 1)
	return x**2    

# Run Optuna
study = optuna.create_study(direction="minimize")
study.optimize(objective, n_trials=20)

# Best parameters
best_params = study.best_params
print("Best Parameters:", best_params)

sequence_length = 60  # Lookback window

# Using best parameters to retrain the model
sequence_length = best_params['sequence_length']
lstm_units = best_params['lstm_units']
dropout_rate = best_params['dropout_rate']
batch_size = best_params['batch_size']
epochs = best_params['epochs']

# Prepare final sequences with the best parameters
X, y = create_sequences(data_scaled, sequence_length)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Train final model on the entire dataset
epochs = 20
batch_size = 32
model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_test, y_test))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=epochs, batch_size=batch_size)

# Make 14-day forecast
last_sequence = data_scaled[-sequence_length:]
last_sequence = np.reshape(last_sequence, (1, sequence_length, 1))

predicted_scaled = model.predict(last_sequence)
predicted = scaler.inverse_transform(predicted_scaled).flatten()

# Generate forecast dates
forecast_dates = pd.date_range(df['Date'].iloc[-1] + pd.Timedelta(days=1), periods=14)
forecast_df = pd.DataFrame({'Date': forecast_dates, 'Predicted': predicted})

# Actual values for comparison
actual_values = df['Price'].values[-14:]

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(actual_values, predicted[:14]))
print("RMSE for 14-Day Forecast:", rmse)

# Plot the actual vs predicted
plt.figure(figsize=(12, 6))
plt.plot(forecast_dates, actual_values, label="Actual Price", marker='o')
plt.plot(forecast_dates, predicted[:14], label="Predicted Price", linestyle="--", marker='o')
plt.title("14-Day Forecast vs Actual Price")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.show()

# Save forecast to CSV
forecast_df.to_csv('14_day_forecast_optimized.csv', index=False)
print("The 14-day forecast has been saved to '30_day_forecast_optimized.csv'")
